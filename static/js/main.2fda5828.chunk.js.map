{"version":3,"sources":["Square.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","useState","val","value","setValue","className","onClick","continue","Value","clicked","ind","index","Board","type","content","setContent","squares","Array","fill","con","squ","setSqu","useEffect","checkWinnerHandler","changeType","squHandler","squs","lines","i","length","a","b","c","console","log","winner","map","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAkCeA,MA/Bf,SAAgBC,GAAQ,IAAD,EAEOC,mBAAS,CAAEC,IAAK,KAFvB,mBAEZC,EAFY,KAELC,EAFK,KAqBnB,OACI,6BACI,yBAAKC,UAAU,SAASC,QAnBZ,WAEZH,EAAMD,KAAOF,EAAMO,YAGH,IAAhBP,EAAMQ,OACNJ,EAAS,CAAEF,IAAK,MAChBF,EAAMS,UACNT,EAAMU,IAAIV,EAAMW,SAGhBP,EAAS,CAAEF,IAAK,MAChBF,EAAMS,UACNT,EAAMU,IAAIV,EAAMW,WAOXR,EAAMD,OCoCRU,MA3Df,WACE,IADe,EAGeX,mBAAS,CAAEY,MAAM,IAHhC,mBAGRC,EAHQ,KAGCC,EAHD,OAIOd,mBAAS,CAAEe,QAASC,MAAM,GAAGC,KAAK,MAAOC,KAAM,IAJtD,mBAIRC,EAJQ,KAIHC,EAJG,KAMfC,qBAAU,WACRC,OAEF,IAAMC,EAAa,YACA,IAAjBV,EAAQD,KACNE,EAAW,CAAEF,MAAM,IACnBE,EAAW,CAAEF,MAAM,KAEjBY,EAAa,SAACf,GAClB,IAAMgB,EAAI,YAAON,EAAIJ,SACrBF,EAAQD,KACNa,EAAKhB,GAAO,IACZgB,EAAKhB,GAAO,IAEdW,EAAO,CAAEL,QAASU,KAEdH,EAAqB,WAWzB,IAVA,IAAMI,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIZ,EAAIJ,QAAQc,IAAMV,EAAIJ,QAAQc,KAAOV,EAAIJ,QAAQe,IAAMX,EAAIJ,QAAQc,KAAOV,EAAIJ,QAAQgB,GAGxF,OAFAC,QAAQC,IAAId,EAAIJ,QAAQc,IACxBT,EAAO,CAAEL,QAASI,EAAMD,KAAM,IACvBC,EAAIJ,QAAQc,KAKnBK,EAASZ,IACf,OACE,6BACA,yBAAKlB,UAAU,aA7CL,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GA8C5B+B,KAAI,SAACzB,GAAD,OAAW,kBAAC,EAAD,CAClBA,MAAOA,EAAOH,MAAOM,EAAQD,KAC7BJ,QAASe,EACTd,IAAKe,EACLlB,SAAYa,EAAID,UAGjBgB,EAAS,qCAAWA,EAAX,kBAAsC,KC3CvCE,MAXf,WACE,OACE,yBAAKhC,UAAU,OACb,yCACA,8CACA,8CACA,kBAAC,EAAD,QCEciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2fda5828.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction Square(props) {\r\n\r\n    const [value, setValue] = useState({ val: '' })\r\n\r\n    const changeValue = () => {\r\n\r\n        if (value.val || props.continue)\r\n            return\r\n\r\n        if (props.Value === true) {\r\n            setValue({ val: 'X' })\r\n            props.clicked();\r\n            props.ind(props.index);\r\n        }\r\n        else {\r\n            setValue({ val: 'O' })\r\n            props.clicked();\r\n            props.ind(props.index);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"square\" onClick={changeValue} >\r\n                {value.val}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Square;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Square from './Square'\r\nimport './App.css';\r\n\r\nfunction Board() {\r\n  const arr = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n  const [content, setContent] = useState({ type: true })\r\n  const [squ, setSqu] = useState({ squares: Array(9).fill(null), con : false })\r\n\r\n  useEffect(() => {\r\n    checkWinnerHandler();\r\n  });\r\n  const changeType = () => {\r\n    content.type === true ?\r\n      setContent({ type: false }) :\r\n      setContent({ type: true })\r\n  }\r\n  const squHandler = (ind) => {\r\n    const squs = [...squ.squares];\r\n    content.type ?\r\n      squs[ind] = 'X' :\r\n      squs[ind] = 'O'\r\n\r\n    setSqu({ squares: squs });\r\n  }\r\n  const checkWinnerHandler = () => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squ.squares[a] && squ.squares[a] === squ.squares[b] && squ.squares[a] === squ.squares[c]) {\r\n        console.log(squ.squares[a]);\r\n        setSqu({ squares: squ , con : true })\r\n        return squ.squares[a];\r\n      }\r\n    }\r\n  \r\n  }\r\n  const winner = checkWinnerHandler();\r\n  return (\r\n    <div>\r\n    <div className='container'>\r\n      {arr.map((index) => <Square\r\n        index={index} Value={content.type}\r\n        clicked={changeType}\r\n        ind={squHandler}\r\n        continue = {squ.con}\r\n      />)}\r\n    </div>\r\n      {winner ? <p>player {winner} won the game </p> :''}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport Board from './Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>XO - Game</h1>\n      <h3> Player One X </h3>\n      <h3> Player Two O </h3>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}