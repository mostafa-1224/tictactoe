{"version":3,"sources":["Square.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","continue","clicked","ind","index","val","Board","lines","useState","type","player","content","setContent","squares","Array","fill","con","squ","setSqu","useEffect","checkWinnerHandler","changeType","squHandler","squs","i","length","a","b","c","map","square","App","target","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAyBeA,MAtBf,SAAgBC,GASZ,OACI,6BACI,yBAAKC,UAAU,SAASC,QAVZ,WACZF,EAAMG,WAGNH,EAAMI,UACNJ,EAAMK,IAAIL,EAAMM,UAMXN,EAAMO,IACHP,EAAMO,IACN,MCyDLC,MAtEf,WAEE,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAVM,EAaeC,mBAAS,CAAEC,MAAM,EAAMC,OAAQ,KAb9C,mBAaRC,EAbQ,KAaCC,EAbD,OAcOJ,mBAAS,CAAEK,QAASC,MAAM,GAAGC,KAAK,MAAOC,KAAK,IAdrD,mBAcRC,EAdQ,KAcHC,EAdG,KAgBfC,qBAAU,WACRC,MACC,CAACH,EAAIJ,UACR,IAAMQ,EAAa,YACA,IAAjBV,EAAQF,KACNG,EAAW,CAAEH,MAAM,EAAOC,OAAQC,EAAQD,SAC1CE,EAAW,CAAEH,MAAM,EAAMC,OAAQC,EAAQD,UAEvCY,EAAa,SAACnB,GAClB,IAAIc,EAAIJ,QAAQV,GAAhB,CAGE,IAAMoB,EAAI,YAAON,EAAIJ,SACrBF,EAAQF,KACNc,EAAKpB,GAAO,IACZoB,EAAKpB,GAAO,IAEde,EAAO,CAAEL,QAASU,EAAMP,IAAKC,EAAID,QAG/BI,EAAqB,WACzB,IAAK,IAAII,EAAI,EAAGA,EAAIjB,EAAMkB,OAAQD,IAAK,CAAC,IAAD,cACnBjB,EAAMiB,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIX,EAAIJ,QAAQa,IAAMT,EAAIJ,QAAQa,KAAOT,EAAIJ,QAAQc,IAAMV,EAAIJ,QAAQa,KAAOT,EAAIJ,QAAQe,GAGxF,OAFAV,EAAO,CAAEL,QAASI,EAAIJ,QAASG,KAAK,IACpCJ,EAAW,CAAEH,KAAME,EAAQF,KAAMC,OAAQO,EAAIJ,QAAQa,KAC9CT,EAAIJ,QAAQa,KAQzB,OACE,6BACE,yBAAK3B,UAAU,aACZkB,EAAIJ,QAAQgB,KAAI,SAACC,EAAQ1B,GAAT,OAAmB,kBAAC,EAAD,CAClCA,MAAOA,EACPF,QAASmB,EACTlB,IAAKmB,EACLrB,SAAUgB,EAAID,IACdX,IAAKyB,QAGRnB,EAAQD,OACP,qCAAWC,EAAQD,OAAnB,qBACA,GAEF,4BAAQX,UAAU,UAAUC,QAnBZ,WAClBkB,EAAO,CAAEL,QAASC,MAAM,GAAGC,KAAK,MAAOC,KAAK,IAC5CJ,EAAW,CAAEH,MAAM,EAAMC,OAAQ,OAiB/B,aCrDSqB,MAZf,WACE,OACE,yBAAKhC,UAAU,OACb,yCACA,8CACA,8CACA,kBAAC,EAAD,MACA,uBAAGiC,OAAO,QAAQC,KAAK,yCAAvB,mCCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6129e6f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Square(props) {\r\n    const changeValue = () => {\r\n        if (props.continue)\r\n            return\r\n        else {\r\n            props.clicked();\r\n            props.ind(props.index);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"square\" onClick={changeValue} >\r\n                {props.val ?\r\n                    props.val :\r\n                    ''\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Square;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Square from './Square'\r\nimport './App.css';\r\n\r\nfunction Board() {\r\n  //Array To Define The Compination i have to find to announce a winner \r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  //state \r\n  const [content, setContent] = useState({ type: true, player: '' })\r\n  const [squ, setSqu] = useState({ squares: Array(9).fill(null), con: false })\r\n\r\n  useEffect(() => {\r\n    checkWinnerHandler();\r\n  }, [squ.squares]);\r\n  const changeType = () => {\r\n    content.type === true ?\r\n      setContent({ type: false, player: content.player }) :\r\n      setContent({ type: true, player: content.player })\r\n  }\r\n  const squHandler = (ind) => {\r\n    if (squ.squares[ind])\r\n      return\r\n    else {\r\n      const squs = [...squ.squares];\r\n      content.type ?\r\n        squs[ind] = 'X' :\r\n        squs[ind] = 'O'\r\n\r\n      setSqu({ squares: squs, con: squ.con });\r\n    }\r\n  }\r\n  const checkWinnerHandler = () => {\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squ.squares[a] && squ.squares[a] === squ.squares[b] && squ.squares[a] === squ.squares[c]) {\r\n        setSqu({ squares: squ.squares, con: true })\r\n        setContent({ type: content.type, player: squ.squares[a] })\r\n        return squ.squares[a];\r\n      }\r\n    }\r\n  }\r\n  const restartGame = () => {\r\n    setSqu({ squares: Array(9).fill(null), con: false });\r\n    setContent({ type: true, player: '' });\r\n  }\r\n  return (\r\n    <div>\r\n      <div className='container'>\r\n        {squ.squares.map((square, index) => <Square\r\n          index={index}\r\n          clicked={changeType}\r\n          ind={squHandler}\r\n          continue={squ.con}\r\n          val={square}\r\n        />)}\r\n      </div>\r\n      {content.player ?\r\n        <p>player {content.player} won the game ...</p> :\r\n        ''\r\n      }\r\n      <button className='restart' onClick={restartGame}>Restart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport Board from './Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>XO - Game</h1>\n      <h3> Player One X </h3>\n      <h3> Player Two O </h3>\n      <Board />\n      <a target='blank' href='https://www.facebook.com/mostafa.prog'>Developed by This Guy Mustafa</a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}